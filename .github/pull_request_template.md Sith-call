# 🚀 Pull Request — 코딩 테스트 풀이

## 🧩 문제
- 플랫폼: [ ] BOJ  [ ] 프로그래머스  [ ] LeetCode  [ ] 기타: ______
- 링크: ______
- 난이도/태그: ______ (예: Greedy, Two Pointers)

## 🧭 접근 요약 (2~3줄)
<!-- 왜 이 접근을 골랐는지 핵심 아이디어만 간단히 -->

## 🛠️ 사용한 기법 / 자료구조
<!-- 예: 슬라이딩 윈도우, 이진 탐색, 우선순위 큐, DP 상태 정의 등 -->

## ⏱️ 목표/실제 복잡도
- 목표: 시간 ____ / 공간 ____
- 실제: 시간 ____ / 공간 ____
<!-- 간단한 근거: 예) 각 원소당 O(1) 처리로 총 O(N) -->

## 🧪 테스트 방법
- 실행/테스트 명령: `____`
- 확인한 사례:
  - 예제 입력 ✅
  - 엣지: 빈 입력/최소값/최댓값/중복/음수/오버플로 가능성/정렬 안정성 등
  - 자체 추가 케이스: `____ -> ____`

## 🧷 정확성 메모 (짧은 증명 스케치)
<!-- 그리디 선택의 정당성, 전이식/불변식, 반례 부재 이유 등 3~5줄 -->

## 🔁 대안/개선 (선택)
- 다른 접근: ____ (장/단점)
- 최적화 여지: 반복 줄이기 / 메모리 절약 / I/O 최적화 등

## 📚 배운 점 (TIL, 선택)
- 오늘의 포인트 한 줄: ____

---

## ✅ 체크리스트
- [ ] 문제 **제약조건**을 근거로 접근을 선택했다
- [ ] 입력/출력 **형식**과 **오프바이원**(인덱스, 범위) 확인
- [ ] **오버플로/언더플로** 가능성 점검 (예: int64, 모듈러)
- [ ] **재귀 한도/스택** 이슈 없거나 처리(반복 전환/`sys.setrecursionlimit`)
- [ ] 시간/공간 복잡도 목표 충족 (예: O(N log N) 이하)
- [ ] 자체 케이스 포함 **테스트 통과**
- [ ] 변수/함수 **이름 가독성** 및 간단한 주석
- [ ] 불필요한 코드/디버그 출력 제거